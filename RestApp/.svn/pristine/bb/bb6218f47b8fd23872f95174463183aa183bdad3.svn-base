package com.tasks;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
 
import javax.annotation.security.RolesAllowed;
import javax.print.attribute.standard.Media;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import com.sun.jersey.api.core.ResourceConfig;
import java.sql.*;

@Path("/")
public class TaskRESTService  {

	static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
	static final String DB_URL = "jdbc:mysql://localhost/comp5332";

	// Database credentials
	static final String USER = "root";
	static final String PASS = "P@ssw0rd";
	
	@POST
	@Path("/taskService")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response taskREST(InputStream incomingData) {
		StringBuilder taskBuilder = new StringBuilder();
		try {
			BufferedReader in = new BufferedReader(new InputStreamReader(incomingData));
			String line = null;
			while ((line = in.readLine()) != null) {
				taskBuilder.append(line);
			}
		} catch (Exception e) {
			System.out.println("Error Parsing: - ");
		}
		System.out.println("Data Received: " + taskBuilder.toString());
 
		// return HTTP response 200 in case of success
		return Response.status(200).entity(taskBuilder.toString()).build();
	}
 
	@GET
	@Path("/verify")
	@Produces(MediaType.TEXT_PLAIN)
	public Response verifyRESTService(InputStream incomingData) {
		String result = "TaskRESTService Successfully started..";
 
		// return HTTP response 200 in case of success
		return Response.status(200)
				.header("Access-Control-Allow-Origin", "*")
	            .header("Access-Control-Allow-Headers", "origin, content-type, accept, authorization")
	            .header("Access-Control-Allow-Credentials", "true")
	            .header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS, HEAD")
	            .header("Access-Control-Max-Age", "1209600")
				.entity(result).build();
	}
	
	@GET
	@Path("/user/{id}_{name}")
	@Produces(MediaType.APPLICATION_JSON)
	@RolesAllowed({"manager-gui","seconddummy"})
	public Response getUser(@PathParam("id")Integer id,@PathParam("name")String name) {
		Map<Integer,String> map = new HashMap<Integer,String>();

		map.put(1, "yoyo");
		map.put(2, "kiki");
		map.put(3, "nana");
		map.put(id, name);
 
		String mapAsJson="";
		try {
			mapAsJson = new ObjectMapper().writeValueAsString(map);
		} catch (JsonGenerationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonMappingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// return HTTP response 200 in case of success
		
		
		return Response.status(200)
				.header("Access-Control-Allow-Origin", "*")
	            .header("Access-Control-Allow-Headers", "origin, content-type, accept, authorization")
	            .header("Access-Control-Allow-Credentials", "true")
	            .header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS, HEAD")
	            .header("Access-Control-Max-Age", "1209600")
	            .entity(mapAsJson)
				.build();
	}

	@GET
	@Path("/tasks")
	@Produces(MediaType.APPLICATION_JSON)
	@RolesAllowed({"admin","user"})
	public Response getTasks() {
		//Map<Integer,Task> map = new HashMap<Integer,Task>();
		List<Task> tasks = new ArrayList<Task>(); 

		Connection conn = null;
		Statement stmt = null;
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
			System.out.println("Connecting to database...");
			conn = DriverManager.getConnection(DB_URL, USER, PASS);
			System.out.println("Creating statement...");
			stmt = conn.createStatement();
			String sql;
			sql = "SELECT id,taskname,status FROM tasks";
			ResultSet rs = stmt.executeQuery(sql);
			while (rs.next()) {
				Task ta = new Task();
				ta.setId(rs.getInt("id"));
				ta.setTaskname(rs.getString("taskname"));
				ta.setStatus(rs.getString("status"));
				ta.setDone(!rs.getString("status").equalsIgnoreCase("open"));
				//map.put(rs.getInt("id"),ta);
				tasks.add(ta);
			}
			rs.close();
			stmt.close();
			conn.close();
		} catch (Exception e) {
			// Handle errors for Class.forName
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException se2) {
			}// nothing we can do
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException se) {
				se.printStackTrace();
			}// end finally try
		}
		
	
		String mapAsJson="";
		try {
			mapAsJson = new ObjectMapper().writeValueAsString(tasks);
		} catch (JsonGenerationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonMappingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// return HTTP response 200 in case of success
		
		
		return Response.status(200)
				.header("Access-Control-Allow-Origin", "*")
	            .header("Access-Control-Allow-Headers", "origin, content-type, accept, authorization")
	            .header("Access-Control-Allow-Credentials", "true")
	            .header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS, HEAD")
	            .header("Access-Control-Max-Age", "1209600")
	            .entity(mapAsJson)
				.build();
	}
 
	@POST
	@Path("/addTask")
	@Consumes(MediaType.APPLICATION_JSON)
	@RolesAllowed({"admin","user"})
	public Response addTask(Task ta) {
		System.out.println("addTask...");
		Connection conn = null;
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
			System.out.println("Connecting to database...");
			conn = DriverManager.getConnection(DB_URL, USER, PASS);
			System.out.println("Creating statement...");
			String sql;
			sql = " insert into tasks (taskname,status)" + " values (?, 'Open')";
			PreparedStatement preparedStmt = conn.prepareStatement(sql);
			preparedStmt.setString (1, ta.getTaskname());
			preparedStmt.execute();
			conn.close();
		} catch (Exception e) {
			// Handle errors for Class.forName
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException se) {
				se.printStackTrace();
			}// end finally try
		}
		
	
	
		// return HTTP response 200 in case of success
		
		
		return Response.status(201)
				.header("Access-Control-Allow-Origin", "*")
	            .header("Access-Control-Allow-Headers", "origin, content-type, accept, authorization")
	            .header("Access-Control-Allow-Credentials", "true")
	            .header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS, HEAD")
	            .header("Access-Control-Max-Age", "1209600")
	            .entity("Success")
				.build();
	}
	
	@PUT
	@Path("/updateTask")
	@Consumes(MediaType.APPLICATION_JSON)
	@RolesAllowed({"admin","user"})
	public Response updateTask(Task ta) {
		System.out.println("updateTask...");
		Connection conn = null;
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
			System.out.println("Connecting to database...");
			conn = DriverManager.getConnection(DB_URL, USER, PASS);
			System.out.println("Creating statement...");
			String sql;
			sql = " update tasks set taskname=?,status=? where id=?";
			PreparedStatement preparedStmt = conn.prepareStatement(sql);
			preparedStmt.setString (1, ta.getTaskname());
			preparedStmt.setString (2, ta.getStatus());
			preparedStmt.setInt(3, ta.getId());
			preparedStmt.execute();
			conn.close();
		} catch (Exception e) {
			// Handle errors for Class.forName
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException se) {
				se.printStackTrace();
			}// end finally try
		}
		
	
	
		// return HTTP response 200 in case of success
		
		
		return Response.status(200)
				.header("Access-Control-Allow-Origin", "*")
	            .header("Access-Control-Allow-Headers", "origin, content-type, accept, authorization")
	            .header("Access-Control-Allow-Credentials", "true")
	            .header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS, HEAD")
	            .header("Access-Control-Max-Age", "1209600")
	            .entity("Success")
				.build();
	}	
	
	@DELETE
	@Path("/deleteTask/{id}")
	@RolesAllowed({"admin"})
	public Response deleteTask(@PathParam("id")Integer id) {
		System.out.println("deleteTask...");
		Connection conn = null;
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
			System.out.println("Connecting to database...");
			conn = DriverManager.getConnection(DB_URL, USER, PASS);
			System.out.println("Creating statement...");
			String sql;
			sql = " delete from tasks where id=?";
			PreparedStatement preparedStmt = conn.prepareStatement(sql);
			preparedStmt.setInt(1, id);
			preparedStmt.execute();
			conn.close();
		} catch (Exception e) {
			// Handle errors for Class.forName
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException se) {
				se.printStackTrace();
			}// end finally try
		}
		
	
	
		// return HTTP response 200 in case of success
		
		//return Response.noContent().build();
		return Response.status(200)
				.header("Access-Control-Allow-Origin", "*")
	            .header("Access-Control-Allow-Headers", "origin, content-type, accept, authorization")
	            .header("Access-Control-Allow-Credentials", "true")
	            .header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS, HEAD")
	            .header("Access-Control-Max-Age", "1209600")
	            .entity("Success")
				.build();
	}		
	
}